{"version":3,"sources":["store/customerReducer.js","asyncActions/customers.js","App.js","store/cashReducer.js","store/index.js","index.js"],"names":["defaultState","customers","ADD_CUSTOMER","ADD_MANY_CUSTOMERS","REMOVE_CUSTOMER","fetchCustomers","dispatch","fetch","then","response","json","data","type","payload","App","props","useDispatch","cash","useSelector","state","addCustomer","name","customer","id","Date","now","removeCustomer","className","onClick","addCash","Number","prompt","getCash","length","map","rootReducer","combineReducers","action","filter","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4LAAMA,EAAe,CACjBC,UAAW,IAGTC,EAAe,eACfC,EAAqB,qBACrBC,EAAkB,kBCJXC,EAAiB,WAC1B,OAAO,SAAAC,GACHC,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAIL,EDoB0B,CAACM,KAAMT,EAAoBU,QCpBrBF,S,OCgD3CG,MAhDf,SAAaC,GAET,IAAMT,EAAWU,cACXC,EAAOC,aAAY,SAAAC,GAAK,OAAIA,EAAMF,KAAKA,QACvChB,EAAYiB,aAAY,SAAAC,GAAK,OAAIA,EAAMlB,UAAUA,aAUjDmB,EAAc,SAACC,GACjB,IAAMC,EAAW,CACbC,GAAIC,KAAKC,MACTJ,QAEJf,EFAuC,CAACM,KAAMV,EAAcW,QEAjCS,KAGzBI,EAAiB,SAACJ,GFDQ,IAACT,EEE7BP,GFF6BO,EEECS,EAASC,GFFG,CAACX,KAAMR,EAAiBS,cEKtE,OACI,sBAAKc,UAAU,MAAf,UACI,qBAAKA,UAAU,OAAf,SAAuBV,IACvB,sBAAKU,UAAU,gBAAf,UACI,wBAAQC,QAAS,kBAxBb,SAACX,GACbX,EAAS,CAACM,KAAM,WAAYC,QAASI,IAuBNY,CAAQC,OAAOC,YAAtC,6FACA,wBAAQH,QAAS,kBArBb,SAACX,GACbX,EAAS,CAACM,KAAM,WAAYC,QAASI,IAoBNe,CAAQF,OAAOC,YAAtC,wFACA,wBAAQH,QAAS,kBAAMR,EAAYW,WAAnC,yGACA,wBAAQH,QAAS,kBAAMtB,EAASD,MAAhC,wJAGAJ,EAAUgC,OAAS,EACb,qBAAKN,UAAU,YAAf,SACG1B,EAAUiC,KAAI,SAAAZ,GAAQ,OACnB,qBAAKK,UAAU,QAA0BC,QAAS,kBAAMF,EAAeJ,IAAvE,SAAmFA,EAASD,MAAhEC,EAASC,SAG3C,qBAAKI,UAAU,MAAf,gI,OC9ChB3B,EAAe,CACjBiB,KAAM,G,QCGJkB,EAAcC,YAAgB,CAChCnB,KDDuB,WAAmC,IAAlCE,EAAiC,uDAAzBnB,EAAcqC,EAAW,uCACzD,OAAQA,EAAOzB,MAEX,IAAK,WACD,OAAO,2BAAIO,GAAX,IAAkBF,KAAME,EAAMF,KAAOoB,EAAOxB,UAGhD,IAAK,WACD,OAAO,2BAAIM,GAAX,IAAkBF,KAAME,EAAMF,KAAOoB,EAAOxB,UAEhD,QACI,OAAOM,ICTflB,UJC2B,WAAmC,IAAlCkB,EAAiC,uDAAzBnB,EAAcqC,EAAW,uCAC7D,OAAQA,EAAOzB,MACX,KAAKT,EACD,OAAO,2BAAIgB,GAAX,IAAkBlB,UAAU,GAAD,mBAAMkB,EAAMlB,WAAZ,YAA0BoC,EAAOxB,YAEhE,KAAKX,EACD,OAAO,2BAAIiB,GAAX,IAAkBlB,UAAU,GAAD,mBAAMkB,EAAMlB,WAAZ,CAAuBoC,EAAOxB,YAE7D,KAAKT,EACD,OAAO,2BAAIe,GAAX,IAAkBlB,UAAU,YAAKkB,EAAMlB,UAAUqC,QAAO,SAAAhB,GAAQ,OAAIA,EAASC,KAAOc,EAAOxB,cAE/F,QACI,OAAOM,MITNoB,EAAQC,YAAYL,EAAaM,YAAgBC,MCJ9DC,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,IAAD,CAAUN,MAAOA,EAAjB,SACI,cAAC,EAAD,QAGRO,SAASC,eAAe,W","file":"static/js/main.92bef001.chunk.js","sourcesContent":["const defaultState = {\r\n    customers: []\r\n}\r\n\r\nconst ADD_CUSTOMER = 'ADD_CUSTOMER'\r\nconst ADD_MANY_CUSTOMERS = 'ADD_MANY_CUSTOMERS'\r\nconst REMOVE_CUSTOMER = 'REMOVE_CUSTOMER'\r\n\r\n\r\nexport const customerReducer = (state = defaultState, action) => {\r\n    switch (action.type) {\r\n        case ADD_MANY_CUSTOMERS:\r\n            return {...state, customers: [...state.customers, ...action.payload]}\r\n\r\n        case ADD_CUSTOMER:\r\n            return {...state, customers: [...state.customers, action.payload]}\r\n\r\n        case REMOVE_CUSTOMER:\r\n            return {...state, customers: [...state.customers.filter(customer => customer.id !== action.payload)]}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const addCustomerAction = (payload) => ({type: ADD_CUSTOMER, payload})\r\nexport const addManyCustomersAction = (payload) => ({type: ADD_MANY_CUSTOMERS, payload})\r\nexport const removeCustomerAction = (payload) => ({type: REMOVE_CUSTOMER, payload})\r\n","import { addManyCustomersAction } from '../store/customerReducer'\r\n\r\nexport const fetchCustomers = () => {\r\n    return dispatch => {\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(response => response.json())\r\n            .then(data => dispatch(addManyCustomersAction(data)))\r\n    }\r\n}","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { addCustomerAction } from './store/customerReducer'\r\nimport { removeCustomerAction } from './store/customerReducer'\r\nimport { fetchCustomers } from './asyncActions/customers'\r\n\r\nfunction App(props) {\r\n\r\n    const dispatch = useDispatch()\r\n    const cash = useSelector(state => state.cash.cash)\r\n    const customers = useSelector(state => state.customers.customers)\r\n\r\n    const addCash = (cash) => {\r\n        dispatch({type: 'ADD_CASH', payload: cash})\r\n    }\r\n\r\n    const getCash = (cash) => {\r\n        dispatch({type: 'GET_CASH', payload: cash})\r\n    }\r\n\r\n    const addCustomer = (name) => {\r\n        const customer = {\r\n            id: Date.now(),\r\n            name\r\n        }\r\n        dispatch(addCustomerAction(customer))\r\n    }\r\n\r\n    const removeCustomer = (customer) => {\r\n        dispatch(removeCustomerAction(customer.id))\r\n    }\r\n\r\n    return (\r\n        <div className='app'>\r\n            <div className='cash'>{cash}</div>\r\n            <div className='btn-container'>\r\n                <button onClick={() => addCash(Number(prompt()))}>Пополнить счет</button>\r\n                <button onClick={() => getCash(Number(prompt()))}>Снять со счета</button>\r\n                <button onClick={() => addCustomer(prompt())}>Добавить клиента</button>\r\n                <button onClick={() => dispatch(fetchCustomers())}>Добавить клиентов из базы</button>\r\n            </div>\r\n            {\r\n                customers.length > 0\r\n                    ? <div className='customers'>\r\n                        {customers.map(customer =>\r\n                            <div className='hover' key={customer.id} onClick={() => removeCustomer(customer)}>{customer.name}</div>\r\n                        )}\r\n                    </div>\r\n                    : <div className='err'>Клиенты отсутствуют!</div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App","\r\n\r\nconst defaultState = {\r\n    cash: 0\r\n}\r\n\r\nexport const cashReducer = (state = defaultState, action) => {\r\n    switch (action.type) {\r\n\r\n        case 'ADD_CASH':\r\n            return {...state, cash: state.cash + action.payload}\r\n\r\n\r\n        case 'GET_CASH':\r\n            return {...state, cash: state.cash - action.payload}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}","import { applyMiddleware, combineReducers, createStore } from 'redux'\r\nimport { cashReducer } from './cashReducer'\r\nimport { customerReducer } from './customerReducer'\r\nimport thunk from 'redux-thunk'\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    cash: cashReducer,\r\n    customers: customerReducer\r\n\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport { store } from './store'\r\n\r\nimport { Provider } from 'react-redux'\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n)\r\n\r\n"],"sourceRoot":""}